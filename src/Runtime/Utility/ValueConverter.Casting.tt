﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<# Type[] types = new[]{
	typeof(SByte), typeof(Int16), typeof(Int32), typeof(Int64),
	typeof(Byte), typeof(UInt16), typeof(UInt32), typeof(UInt64),
	typeof(Single), typeof(Double), typeof(Decimal)
}; #>
using Chips.Runtime.Types.NumberProcessing;
using System;
using System.Runtime.CompilerServices;

namespace Chips.Runtime.Utility {
	partial class ValueConverter {
<# foreach (var type in types) {
#>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= type.Name #>_T CastTo<#= type.Name #>_T<T>(this T number) where T : INumber => new(number.To<#= type.Name #>());

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= type.Name #>_T CastTo<#= type.Name #>_T(this <#= type.Name #> number) => new(number);

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= type.Name #> CastTo<#= type.Name #>(INumber number) => number.To<#= type.Name #>();

<#
} #>
	}
}
