﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<# Type[] types = new[]{
	typeof(SByte), typeof(Int16), typeof(Int32), typeof(Int64),
	typeof(Byte), typeof(UInt16), typeof(UInt32), typeof(UInt64),
	typeof(IntPtr), typeof(UIntPtr),
	typeof(Single), typeof(Double), typeof(Decimal)
}; #>
using System;
using System.Runtime.CompilerServices;

namespace Chips.Runtime.Utility {
	partial class ConstrainedArithmetic {
<# foreach (var type in types) {
#>
<# if (type.Name.StartsWith("Int") || type.Name == "SByte") {
#>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		private static <#= type.Name #> AddWithOverflowCheck(<#= type.Name #> a, <#= type.Name #> b, out bool overflowFlag) {
            unchecked {
                <#= type.Name #> c = (<#= type.Name #>)(a + b);
                overflowFlag = ((<#= type.Name #>)(a ^ b) >= 0) & ((<#= type.Name #>)(a ^ c) < 0);
                return c;
            }
        }

<#
} #>

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= type.Name #> Add(<#= type.Name #> a, <#= type.Name #> b) {
<# if (type.Name.StartsWith("U") || type.Name == "Byte") {
#>
			<#= type.Name #> sum = (<#= type.Name #>)(a + b);

			if (sum < a) {
				Registers.F.Overflow = true;
				return <#= type.Name #>.MaxValue;
			}

			return sum;
<# } else if (type.Name == "Single" || type.Name == "Double") {
#>
			if (b < 0)
				return Subtract(a, -b);

			// Float arithmetic doesn't overflow, but it does follow IEEE 754 rules.  Notably:
			//   NaN       + anything  = NaN
			//   anything  + NaN       = NaN
			//   Infinity  + not NaN   = Infinity
			//   not NaN   + Infinity  = Infinity
			//   -Infinity + not NaN  = -Infinity
			//   not NaN   + -Infinity = -Infinity
			return a + b;
<# } else if (type.Name == "Decimal") {
#>
			if (b < 0)
				return Subtract(a, -b);

			// Throws exception on overflow
			try {
				return a + b;
			} catch {
				Registers.F.Overflow = true;
				return a > 0 ? decimal.MaxValue : decimal.MinValue;
			}
<# } else {
#>
			if (b < 0 && b != <#= type.Name #>.MinValue)
				return Subtract(a, (<#= type.Name #>)(-b));

			<#= type.Name #> sum = AddWithOverflowCheck(a, b, out bool overflow);

			if (overflow) {
				Registers.F.Overflow = true;
				return a > 0 ? <#= type.Name #>.MaxValue : <#= type.Name #>.MinValue;
			}

			return sum;
<#
}#>
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public static <#= type.Name #> Subtract(<#= type.Name #> a, <#= type.Name #> b) {
<# if (type.Name.StartsWith("U") || type.Name == "Byte") {
#>
			<#= type.Name #> sum = (<#= type.Name #>)(a - b);

			if (sum < a) {
				Registers.F.Overflow = true;
				return <#= type.Name #>.MaxValue;
			}

			return sum;
<# } else if (type.Name == "Single" || type.Name == "Double") {
#>
			if (b < 0)
				return Add(a, -b);

			// Float arithmetic doesn't overflow, but it does follow IEEE 754 rules.  Notably:
			//   NaN       - anything  = NaN
			//   anything  - NaN       = NaN
			//   Infinity  - not NaN   = Infinity
			//   not NaN   - Infinity  = Infinity
			//   -Infinity - not NaN  = -Infinity
			//   not NaN   - -Infinity = -Infinity
			return a - b;
<# } else if (type.Name == "Decimal") {
#>
			if (b < 0 && b != <#= type.Name #>.MinValue)
				return Add(a, -b);

			// Throws exception on overflow
			try {
				return a - b;
			} catch {
				Registers.F.Overflow = true;
				return a > 0 ? decimal.MaxValue : decimal.MinValue;
			}
<# } else {
#>
			if (b < 0)
				return Add(a, (<#= type.Name #>)(-b));

			<#= type.Name #> sum = AddWithOverflowCheck(a, (<#= type.Name #>)(-b), out bool overflow);

			if (overflow) {
				Registers.F.Overflow = true;
				return a > 0 ? <#= type.Name #>.MaxValue : <#= type.Name #>.MinValue;
			}

			return sum;
<#
}#>
		}
		
<#
} #>
	}
}