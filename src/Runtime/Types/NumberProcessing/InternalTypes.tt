﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ output extension=".cs" #>
<# Type[] iTypes = new[]{
	typeof(SByte), typeof(Int16), typeof(Int32), typeof(Int64),
	typeof(Byte), typeof(UInt16), typeof(UInt32), typeof(UInt64),
	typeof(IntPtr), typeof(UIntPtr)
}; #>
<# Type[] fTypes = new[]{
	typeof(Single), typeof(Double), typeof(Decimal)
}; #>
using Chips.Runtime.Meta;
using Chips.Runtime.Utility;
using System;

#pragma warning disable CS0162
namespace Chips.Runtime.Types.NumberProcessing {
<# foreach (var type in iTypes) {
#>
	[TextTemplateGenerated]
<# if (!type.Name.EndsWith("IntPtr")) {
#>
	public partial struct <#= type.Name #>_T : I<#= type.Name.StartsWith("U") || type.Name == "Byte" ? "Unsigned" : "" #>Integer<<#= type.Name #>>, INumberConstants<<#= type.Name #>_T> {
<# } else {
#>
	public unsafe partial struct <#= type.Name #>_T : I<#= type.Name.StartsWith("U") ? "Unsigned" : "" #>Integer<<#= type.Name #>>, INumberConstants<<#= type.Name #>_T> {
<#
} #>
		private <#= type.Name #> value;

		public readonly object Value => value;

		public readonly <#= type.Name #> ActualValue => value;

		public readonly bool IsZero => value == 0;

<# if (!type.Name.StartsWith("U") && type.Name != "Byte") {
#>
		public readonly bool IsNegative => value < 0;
<# } else {
#>
		public readonly bool IsNegative => false;
<#
} #>

		public readonly int NumericSize => sizeof(<#= type.Name #>);

		public static <#= type.Name #>_T Zero => new <#= type.Name #>_T((<#= type.Name #>)0);

		public static <#= type.Name #>_T One => new <#= type.Name #>_T((<#= type.Name #>)1);

		public <#= type.Name #>_T(<#= type.Name #> value) {
			this.value = value;
		}

<# if (type.Name != "Int32") {
#>
		public <#= type.Name #>_T(Int32 value) {
			this.value = (<#= type.Name #>)value;
		}

<#
} #>
		public readonly INumber Cast(INumber number) {
			return ValueConverter.CastTo<#= type.Name #>_T(number);
		}

		public readonly INumber Upcast(INumber number) {
			return TypeTracking.ShouldUpcast(number, this) ? ValueConverter.CastTo<#= type.Name #>_T(number) : number;
		}

<# if (!type.Name.StartsWith("U") && type.Name != "Byte") {
#>
		public readonly INumber Abs() {
			if (value == <#= type.Name #>.MinValue) {
				Registers.F.Overflow = true;
				return new <#= type.Name #>_T(<#= type.Name #>.MaxValue);
			}

			return new <#= type.Name #>_T(Math.Abs(value));
		}
<# } else {
#>
		public readonly INumber Abs()
			=> new <#= type.Name #>_T(value);
<#
} #>

		public readonly INumber Add(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Add(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Add(this);

			return new <#= type.Name #>_T(ConstrainedArithmetic.Add(value, number.To<#= type.Name #>()));
		}

		public readonly IInteger And(IInteger number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return ((IInteger)upcast!).And(number);
			}

			if (number is IFloat)
				throw new Exception("Cannot perform bitwise-AND operations with non-integer values");

			if (TypeTracking.ShouldUpcast(this, number))
				return number.And(this);

			return new <#= type.Name #>_T(value & number.To<#= type.Name #>());
		}

		public readonly IInteger ArithmeticRotateLeft() {
			bool carry = Registers.F.Carry;
			Registers.F.Carry = unchecked(value & (<#= type.Name #>)((<#= type.Name #>)1 << (8 * sizeof(<#= type.Name #>) - 1))) != 0;
			
			var i = new <#= type.Name #>_T(value << 1);
			if (carry)
				i.value |= 1;

			return i;
		}

		public readonly IInteger ArithmeticRotateRight() {
			bool carry = Registers.F.Carry;
			Registers.F.Carry = (value & 1) != 0;
			
			var i = new <#= type.Name #>_T(value >> 1);
			if (carry)
				i.value = (<#= type.Name #>)unchecked(i.value | ((<#= type.Name #>)1 << (8 * sizeof(<#= type.Name #>) - 1)));

			return i;
		}

		public readonly IInteger ArithmeticShiftLeft()
			=> new <#= type.Name #>_T(value << 1);

		public readonly IInteger ArithmeticShiftRight()
			=> new <#= type.Name #>_T(value >> 1);

		public readonly void Compare(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				upcast.Compare(number);
				return;
			}

			if (TypeTracking.ShouldUpcast(this, number)) {
				number.Upcast(this).Compare(number);
				return;
			}

			Registers.F.Negative = this.CompareLessThan(number);
			Registers.F.Zero = this.CompareEquals(number);
		}

		public readonly bool CompareEquals(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.CompareEquals(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.CompareEquals(this);

			return value == number.To<#= type.Name #>();
		}

		public readonly bool CompareGreaterThan(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.CompareGreaterThan(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).CompareGreaterThan(number);

			return value > number.To<#= type.Name #>();
		}

		public readonly bool CompareLessThan(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.CompareLessThan(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).CompareLessThan(number);

			return value < number.To<#= type.Name #>();
		}

		public readonly INumber Decrement()
			=> new <#= type.Name #>_T(unchecked(value - 1));

		public readonly INumber Divide(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Divide(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Divide(number);

			return new <#= type.Name #>_T(value / number.To<#= type.Name #>());
		}

		public readonly INumber Increment()
			=> new <#= type.Name #>_T(unchecked(value + 1));

		public readonly INumber Modulus(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Modulus(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Modulus(number);

			return new <#= type.Name #>_T(value % number.To<#= type.Name #>());
		}

		public readonly INumber Multiply(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Multiply(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Multiply(this);

			return new <#= type.Name #>_T(unchecked(value * number.To<#= type.Name #>()));
		}

		public readonly INumber Negate() {
<# if (!type.Name.StartsWith("U") && type.Name != "Byte") {
#>
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Negate();
			}

			return new <#= type.Name #>_T(-value);
<# } else {
#>
			throw new InvalidOperationException("Negation cannot be performed on unsigned integers");
<#
} #>
		}

		public readonly IInteger Not() {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return ((IInteger)upcast!).Not();
			}

			return new <#= type.Name #>_T(~value);
		}

		public readonly IInteger Or(IInteger number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return ((IInteger)upcast!).Or(number);
			}

			if (number is IFloat)
				throw new Exception("Cannot perform bitwise-OR operations with non-integer values");

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Or(this);

			return new <#= type.Name #>_T(value | number.To<#= type.Name #>());
		}

		public readonly INumber Subtract(INumber number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return upcast.Subtract(number);
			}

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Subtract(number);

			return new <#= type.Name #>_T(ConstrainedArithmetic.Subtract(value, number.To<#= type.Name #>()));
		}

<# foreach (var typeTo in iTypes) {
#>
		public readonly <#= typeTo.Name #> To<#= typeTo.Name #>() => (<#= typeTo.Name #>)value;

<#
} #>
<# foreach (var typeTo in fTypes) {
#>
		public readonly <#= typeTo.Name #> To<#= typeTo.Name #>() => (<#= typeTo.Name #>)value;

<#
} #>
		public readonly IInteger Xor(IInteger number) {
			// For sizes larger than int, this block should be removed by the compiler
			if (sizeof(<#= type.Name #>) < sizeof(int)) {
				INumber upcast = ValueConverter.UpcastToAtLeastInt32(this);
				return ((IInteger)upcast!).Xor(number);
			}

			if (number is IFloat)
				throw new Exception("Cannot perform bitwise-XOR operations with non-integer values");

			if (TypeTracking.ShouldUpcast(this, number))
				return number.Xor(this);

			return new <#= type.Name #>_T(value ^ number.To<#= type.Name #>());
		}
	}

<#
} #>
<# foreach (var type in fTypes) { 
#>
	[TextTemplateGenerated]
	public struct <#= type.Name #>_T : IFloat<<#= type.Name #>>, IFloatConstants<<#= type.Name #>_T> {
		private <#= type.Name #> value;

		public readonly object Value => value;

		public readonly <#= type.Name #> ActualValue => value;

		public readonly bool IsZero => value == 0;

		public readonly bool IsNegative => value < 0;

		public readonly int NumericSize => sizeof(<#= type.Name #>);

		public static <#= type.Name #>_T Zero => new <#= type.Name #>_T((<#= type.Name #>)0);

		public static <#= type.Name #>_T One => new <#= type.Name #>_T((<#= type.Name #>)1);

<# if (type.Name != "Decimal") {
#>
		public static <#= type.Name #>_T E => new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.E);

		public readonly bool IsNaN => <#= type.Name #>.IsNaN(value);

		public readonly bool IsInfinity => <#= type.Name #>.IsInfinity(value);
<# } else {
#>
		public static <#= type.Name #>_T E => new <#= type.Name #>_T(DecimalMath.DecimalEx.E);

		public readonly bool IsNaN => false;

		public readonly bool IsInfinity => false;
<#
} #>

		public <#= type.Name #>_T(<#= type.Name #> value) {
			this.value = value;
		}

<# if (type.Name != "Single") {
#>
		public <#= type.Name #>_T(Single value) {
			this.value = (<#= type.Name #>)value;
		}

<#
} #>
		public readonly INumber Cast(INumber number) {
			return ValueConverter.CastTo<#= type.Name #>_T(number);
		}

		public readonly INumber Upcast(INumber number) {
			return TypeTracking.ShouldUpcast(number, this) ? ValueConverter.CastTo<#= type.Name #>_T(number) : number;
		}

		public readonly INumber Abs()
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Abs(value));

		public readonly IFloat Acos()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Acos(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.ACos(value));
<#
} #>

		public readonly IFloat Acosh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Acosh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"acosh\" on decimal values is not supported");
<#
} #>

		public readonly INumber Add(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Add(this);

			return new <#= type.Name #>_T(ConstrainedArithmetic.Add(value, number.To<#= type.Name #>()));
		}

		public readonly IFloat Asin()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Asin(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.ASin(value));
<#
} #>

		public readonly IFloat Asinh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Asinh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"asinh\" on decimal values is not supported");
<#
} #>

		public readonly IFloat Atan()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Atan(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.ATan(value));
<#
} #>

		public readonly IFloat Atan2(IFloat divisor) {
			if (TypeTracking.ShouldUpcast(this, divisor))
				return ((IFloat)divisor.Upcast(this)).Atan2(divisor);

<# if (type.Name != "Decimal") {
#>
			return new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : " "#>.Atan2(value, divisor.To<#= type.Name #>()));
<# } else {
#>
			return new <#= type.Name #>_T(DecimalMath.DecimalEx.ATan2(value, divisor.To<#= type.Name #>()));
<#
} #>
		}

		public readonly IFloat Atanh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Asinh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"atanh\" on decimal values is not supported");
<#
} #>

		public readonly INumber Ceiling()
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Ceiling(value));

		public readonly void Compare(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number)) {
				number.Upcast(this).Compare(number);
				return;
			}

			Registers.F.Negative = this.CompareLessThan(number);
			Registers.F.Zero = this.CompareEquals(number);
		}

		public readonly bool CompareEquals(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.CompareEquals(this);

			return value == number.To<#= type.Name #>();
		}

		public readonly bool CompareGreaterThan(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).CompareGreaterThan(number);

			return value > number.To<#= type.Name #>();
		}

		public readonly bool CompareLessThan(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).CompareLessThan(number);

			return value < number.To<#= type.Name #>();
		}

		public readonly IFloat Cos()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Cos(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Cos(value));
<#
} #>

		public readonly IFloat Cosh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Cosh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"cosh\" on decimal values is not supported");
<#
} #>
		
		public readonly INumber Decrement()
			=> new <#= type.Name #>_T(value + 1);

		public readonly INumber Divide(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Divide(number);

			return new <#= type.Name #>_T(value / number.To<#= type.Name #>());
		}

		public readonly IFloat Exp()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Exp(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Exp(value));
<#
} #>

		public readonly INumber Floor()
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Floor(value));

		public readonly IInteger GetBits()
<# if (type.Name == "Decimal") {
#>
			=> throw new InvalidOperationException("Retrieving the bits on an decimal instance is not supported");
<# } else {
#>
			=> ValueConverter.RetrieveFloatingPointBits(this);
<#
} #>

		public readonly INumber Increment()
			=> new <#= type.Name #>_T(value + 1);

		public readonly IFloat Inverse()
			=> (IFloat)One.Divide(this);

		public readonly IFloat Ln()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Log(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Log(value));
<#
} #>

		public readonly IFloat Log10()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Log10(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Log10(value));
<#
} #>

		public readonly IFloat Log2()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Log2(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Log2(value));
<#
} #>

		public readonly INumber Modulus(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Modulus(number);

			return new <#= type.Name #>_T(value % number.To<#= type.Name #>());
		}

		public readonly INumber Multiply(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Multiply(this);

			return new <#= type.Name #>_T(value * number.To<#= type.Name #>());
		}

		public readonly INumber Negate()
			=> new <#= type.Name #>_T(-value);

		public readonly IFloat Pow(IFloat exponent) {
			if (TypeTracking.ShouldUpcast(this, exponent))
				return ((IFloat)exponent.Upcast(this)).Pow(exponent);

<# if (type.Name != "Decimal") {
#>
			return new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Pow(value, exponent.To<#= type.Name #>()));
<# } else {
#>
			return new <#= type.Name #>_T(DecimalMath.DecimalEx.Pow(value, exponent.To<#= type.Name #>()));
<#
} #>
		}

		public readonly IFloat Root(IFloat root)
			=> Pow(root.Inverse());

		public readonly IFloat Sin()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Sin(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Sin(value));
<#
} #>

		public readonly IFloat Sinh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Sinh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"sinh\" on decimal values is not supported");
<#
} #>

		public readonly IFloat Sqrt()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Sqrt(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Sqrt(value));
<#
} #>

		public readonly INumber Subtract(INumber number) {
			if (TypeTracking.ShouldUpcast(this, number))
				return number.Upcast(this).Subtract(number);

			return new <#= type.Name #>_T(ConstrainedArithmetic.Subtract(value, number.To<#= type.Name #>()));
		}

		public readonly IFloat Tan()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Tan(value));
<# } else {
#>
			=> new <#= type.Name #>_T(DecimalMath.DecimalEx.Tan(value));
<#
} #>

		public readonly IFloat Tanh()
<# if (type.Name != "Decimal") {
#>
			=> new <#= type.Name #>_T(Math<#= type.Name == "Single" ? "F" : "" #>.Tanh(value));
<# } else {
#>
			=> throw new InvalidOperationException("Performing \"tanh\" on decimal values is not supported");
<#
} #>

<# foreach (var typeTo in iTypes) {
#>
		public readonly <#= typeTo.Name #> To<#= typeTo.Name #>() => (<#= typeTo.Name #>)value;

<#
} #>
<# foreach (var typeTo in fTypes) {
#>
		public readonly <#= typeTo.Name #> To<#= typeTo.Name #>() => (<#= typeTo.Name #>)value;

<#
} #>
	}

<#
} #>
}