// Compiled bytecode from schema-reference.txt

// <-- string heap -->
// . . . S y s t e m . . S a m p l
// e . . P r o g r a m . . M a i n
// . . v o i d . . a r g s . . s t
// r i n g [ ] . . H e l l o   W o
// r l d ! . . ( 1 0 0   +   1 5 )
//   /   3   *   4   =   . . N 3 .
// . ( 4 5 . 0   -   1 5 . 2 5 )  
// *   1 3 . 5   =   . 
7A
00 00 06 53 79 73 74 65 6D 00 06 53 61 6D 70 6C
65 00 07 50 72 6F 67 72 61 6D 00 04 4D 61 69 6E
00 04 76 6F 69 64 00 04 61 72 67 73 00 08 73 74
72 69 6E 67 5B 5D 00 0C 48 65 6C 6C 6F 20 57 6F
72 6C 64 21 00 15 28 31 30 30 20 2B 20 31 35 29
20 2F 20 33 20 2A 20 34 20 3D 20 00 02 4E 33 00
18 28 34 35 2E 30 20 2D 20 31 35 2E 32 35 29 20
2A 20 31 33 2E 35 20 3D 20 00 

// .import System
05 02 00 00 00

// .namespace Sample {
00 0A 00 00 00

//	.type Program : class assembly static {
01 12 00 00 00 80 10 00 00 00 00 00 00 61 00 00
02 01

//		.method Main (args: string[]) public static -> void {
03 1B 00 00 00 81 10 00 00 21 00 00 00 01 27 00
00 00 2D 00 00 00 00 00 16

//			; Print "Hello world!"
//			ldc.s "Hello world!"
04 37 00 00 00
//			printl
4F

//			; Calculate something using &A, then print it
//			ldc.i 100
02 64 00 00 00
//			add 15
50 0F 00 00 00
//			div 3
53 03 00 00 00
//			mul 4
52 04 00 00 00
//			push &A
10 00
//			tostr
1E
//			push &S
10 02
//			ldcs "(100 + 15) / 3 * 4 = "
04 45 00 00 00
//			cat
36
//			printl
4F

//			; Calculate something using &I, then print it
//			ldc.f 45.0f
03 00 00 34 42
//			sub.f 15.25f
71 00 00 74 41
//			; Multiplying by larger number type (double > float) will upcast to it
//			mul.f 13.5
FD 32 00 00 00 00 00 00 2B 40
   * COMPILATION NOTE: "mul.f" is converted to "mul.d"
//			push &I
10 01
//			tostr "N3"
2E 5C 00 00 00
//			push &S
10 02
//			ldc.s "(45.0 - 15.25) * 13.5 = "
04 60 00 00 00
//			cat
36
//			printl
4F

//			ret
4D

//		}
//	}
// }